<%#
LuCI - Lua Configuration Interface
Copyright 2010 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id: bandwidth.htm 9014 2012-08-14 13:08:18Z jow $

-%>

<%-
	local dev
	local remote_devices = { }
	local cmd_show_ap = "ls /var/lib/luci-bwc/capwap"

	--[[
	local ntm = require "luci.model.network".init()
	local devices = { }
	for _, dev in luci.util.vspairs(luci.sys.net.devices()) do
		if dev ~= "lo" and not ntm:ignore_interface(dev) then
			devices[#devices+1] = dev
		end
	end

	local curdev = luci.dispatcher.context.requestpath
	      curdev = curdev[#curdev] ~= "bandwidth" and curdev[#curdev] or devices[1]
	--]]

	for w in string.gfind(luci.sys.exec(cmd_show_ap), "[%d%a]+") do
		table.insert(remote_devices, w)
	end

	dev = luci.dispatcher.context.requestpath
	dev = dev[#dev] ~= "remote" and dev[#dev] or remote_devices[1]
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<link type="text/css" rel="stylesheet" href="<%=resource%>/remote_dev.css" />
<script type="text/javascript">//<![CDATA[
	var rtxhr = new XHR();

	var G;
	var TIME = 0;
	var RXB  = 1;
	var RXP  = 2;
	var TXB  = 3;
	var TXP  = 4;

	var width  = 760;
	var height = 300;
	var step   = 5;

	var data_wanted = Math.floor(width / step);
	var data_fill   = 0;
	var data_stamp = [ ];
	var dev_max = 64;

	//var data_merg = [ ];
	var data_merg = new Array();
	var data_table;
	var line_mg = [ ];
	
	var label_25;
	var label_50;
	var label_75;
	
	var id_data = [ ];
	var label_text = [ ];
	var label_cur;
	var label_avg;
	var label_peak;

	var label_scale;
	var label_scalev;

	label_text[0] = '<%:Current%>';
	label_text[1] = '<%:Average%>';
	label_text[2] = '<%:Peak%>';
	
	id_data[0] = 'cur';
	id_data[1] = 'avg';
	id_data[2] = 'peak';
	
	var colo = [];
	colo[0] = 'blue';
	colo[1] = 'yellow';
	colo[2] = 'red';
	colo[3] = 'green';
	colo[4] = 'fuchsia';
	colo[5] = 'maroon';
	colo[6] = 'lime';
	colo[7] = 'purple';
	
	function MouseOver()
	{
		var obj = G.getElementById('pl_' + this.id);
		obj.setAttribute('class', 'blod_line');
	}
	
	function MouseOut()
	{
		var obj = G.getElementById('pl_' + this.id);
		obj.setAttribute('class', 'slim_line');
	}
	
	function bandwidth_label(bytes, br)
	{
		var uby = '<%:kB/s%>';
		var kby = (bytes / 1024);

		if (kby >= 1024)
		{
			uby = '<%:MB/s%>';
			kby = kby / 1024;
		}

		var ubi = '<%:kbit/s%>';
		var kbi = (bytes * 8 / 1024);

		if (kbi >= 1024)
		{
			ubi = '<%:Mbit/s%>';
			kbi = kbi / 1024;
		}

		return String.format("%f %s%s(%f %s)",
			kbi.toFixed(2), ubi,
			br ? '-' : ' ',
			kby.toFixed(2), uby
		);
	}

	/* wait for SVG */
	window.setTimeout(
		function() {
			var svg = document.getElementById('rtsvg');
	
			try {
				G = svg.getSVGDocument
					? svg.getSVGDocument() : svg.contentDocument;
			}
			catch(e) {
				G = document.embeds['rtsvg'].getSVGDocument();
			}

			if (!G)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = svg.offsetWidth  - 2;
				height      = svg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step);

				/* find svg elements */
				//line_mg = G.getElementById('pl1');
				
				/* prefill datasets */
				for (var i = 0; i < dev_max; i++)
				{
					data_merg[i] = new Array();
					data_stamp[i] = 0;
					for (var j = 0; j < data_wanted; j++)
					{
						data_merg[i][j] = 0;
					}
				}
				
				data_table = document.getElementById('polylines');
				
				label_25 = G.getElementById('label_25');
				label_50 = G.getElementById('label_50');
				label_75 = G.getElementById('label_75');
				
				label_scale   = document.getElementById('scale');
				label_scalev   = document.getElementById('scalev');

				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{
					var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
						line.setAttribute('x1', i);
						line.setAttribute('y1', 0);
						line.setAttribute('x2', i);
						line.setAttribute('y2', '100%');
						line.setAttribute('style', 'stroke:black;stroke-width:0.1');

					var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
						text.setAttribute('x', i + 5);
						text.setAttribute('y', 15);
						text.setAttribute('style', 'fill:#999999; font-size:9pt');
						text.appendChild(G.createTextNode(Math.round((width - i) / step / 60) + 'm'));

					label_25.parentNode.appendChild(line);
					label_25.parentNode.appendChild(text);
				}

				label_scale.innerHTML = String.format('<%:(%d minute window, %d second interval)%>', data_wanted / 60, 3);
				label_scalev.innerHTML = '<%=luci.http.formvalue("order")%>';
				
				/* render datasets, start update interval */
				XHR.poll(3, '<%=build_url("admin/status/realtime/remote_status", luci.http.formvalue("order"))%>', null,
					function(x, data)
					{
						var id;
						var data_max   = 0;
						var data_scale = 0;

						var data_avg = 0;
						var data_peak = 0;

						var poly_line = G.getElementsByTagName('polyline');
						
						while(poly_line.length > 0)
							poly_line[0].parentNode.removeChild(poly_line[0]);
						
						console.log("num:%d", data.length);
						
						if(data.length > 0)
						{
							while (data_table.rows.length > 0)
								data_table.rows[0].parentNode.removeChild(data_table.rows[0]);
						}

						for(var i = 0; i < data.length; i++)
						{
							line_mg[i] = null;
							line_mg[i] = G.getElementById('pl_' + data[i][0]);
							if(!line_mg[i])
							{
								console.log("create line for %s", data[i][0]);
								line_mg[i] = G.createElementNS('http://www.w3.org/2000/svg', 'polyline');
								line_mg[i].setAttribute('id', 'pl_' + data[i][0]);
								line_mg[i].setAttribute('points', '');
								line_mg[i].setAttribute('style', 'fill:'+colo[i % 3]+';stroke:'+ colo[i % 3]+ ';');
								line_mg[i].setAttribute('class', 'slim_line');
								label_25.parentNode.appendChild(line_mg[i]);
							}
							
							console.log("polling in:%s", data[i][0]);
							
							var tr = data_table.insertRow(-1);
							tr.className = 'row_style_' + (i%2);
							
							for(var j = 0; j < label_text.length; j++)
							{
													
								var td = tr.insertCell(-1);
								//td.setAttribute('style', 'text-align:right; vertical-align:top');
								
								if(j > 0)
								{
									td.setAttribute('id', String.format('bw_%s_%s', data[i][0],id_data[j]));
									td.innerHTML = String.format(
										'<strong>%s-</strong>', label_text[j]);
								}
								else
								{
									td.id = data[i][0];
									td.innerHTML = '<strong style="border-bottom:2px solid '+colo[i % 3] +'">' + data[i][0] + '</strong>';
									td.onmouseover = MouseOver;
									td.onmouseout = MouseOut;
									//td.onmouseover = function(){change_class_name(line_mg[i], 'blod_line');}
									//td.onmouseout = function(){change_class_name(line_mg[i], 'slim_line');}
								}
								/*
								var txt = tr.insertCell(-1);
								txt.setAttribute('id', String.format('bw_%s_%s', data[i][0],id_data[j]));
								console.log("create label object %s", String.format('bw_%s_%s', data[i][0], id_data[j]));
								*/
							}

							console.log('starting poll %s', data[i][0]);
							id = String.format('bw_%s_cur', data[i][0]);
							label_cur  = document.getElementById(id);
							id = String.format('bw_%s_avg', data[i][0]);
							label_avg  = document.getElementById(id);
							id = String.format('bw_%s_peak',data[i][0]);
							label_peak = document.getElementById(id);
							
							//label_scalev.innerHTML = String.format('<%:(%d)%>', data.length);
							
							for (var j = 1; j < data[i].length; j++)
							{
								/* skip overlapping entries */
								if (data[i][j][TIME] <= data_stamp[i])
									continue;

								/* normalize difference against time interval */
								if (j > 1)
								{
									var time_delta = data[i][j][TIME] - data[i][j-1][TIME];
									var data_delta = (data[i][j][RXB] - data[i][j-1][RXB]) + (data[i][j][TXB] - data[i][j-1][TXB]);
									if (time_delta)//&& data_delta)
									{
										data_merg[i].push(data_delta / (2 * time_delta));
										//console.log('data:%d time_delta:%d', (data_delta) / (2 * time_delta), time_delta);
									}
								}
							}

							/* cut off outdated entries */
							data_merg[i] = data_merg[i].slice(data_merg[i].length - data_wanted, data_merg[i].length);

							/* find peak */
							for (var j = 0; j < data_merg[i].length; j++)
							{
								data_max = Math.max(data_max, data_merg[i][j]);
								
								data_peak = Math.max(data_peak, data_merg[i][j]);

								if (j > 0)
								{
									data_avg = (data_avg + data_merg[i][j]) / 2;
								}
								else
								{
									data_avg = data_merg[i][j];
								}
							}

							/* remember current timestamp, calculate horizontal scale */
							data_stamp[i] = data[i][data[i].length-1][TIME];
							data_scale = height / (data_max * 1.1);


							/* plot data */
							var pt_mg = '0,' + height;

							var y_mg = 0;

							for (var j = 0; j < data_merg[i].length; j++)
							{
								var x = j * step;

								y_mg = height - Math.floor(data_merg[i][j] * data_scale);

								pt_mg += ' ' + x + ',' + y_mg;
							}

							pt_mg += ' ' + width + ',' + y_mg + ' ' + width + ',' + height;


							line_mg[i].setAttribute('points', pt_mg);

							label_25.firstChild.data = bandwidth_label(1.1 * 0.25 * data_max);
							label_50.firstChild.data = bandwidth_label(1.1 * 0.50 * data_max);
							label_75.firstChild.data = bandwidth_label(1.1 * 0.75 * data_max);

							//label_cur.innerHTML = bandwidth_label(data_merg[i][data_merg[i].length-1], true);
							label_avg.innerHTML = bandwidth_label(data_avg, true);
							label_peak.innerHTML = bandwidth_label(data_peak, true);
						}//for
					}//function
				);//XHR.poll
			}
		}, 1000
	);
//]]></script>

<h2><a id="content" name="content"><%:Realtime Traffic%></a></h2>

<embed id="rtsvg" style="width:100%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/remote.svg" />
<div style="text-align:right"><small id="scale">-</small></div>
<div style="text-align:right"><small id="scalew"><%=(luci.sys.exec(cmd_show_ap))%>-<%=pcdata(dev)%></small></div>
<div style="text-align:right"><small id="scalev">-</small></div>
<br />

<form>
	<select style="width:auto;" id="order" name="order">
		<% if luci.http.formvalue("order") == "descend" then %>
			<option value="ascend">Ascend</option>
			<option value="descend" selected="selected">Descend</option>
		<% else %>
			<option value="ascend" selected="selected">Ascend</option>
			<option value="descend">Descend</option>			
		<% end %>
	</select>
	<input class="cbi-button cbi-button-save" type="submit" value="Submit" />
</form>
<table style="width:100%">                                                                                                                            
        <thead>                                                                                                                                        
                <tr style="text-align:center;">                                                                                                                                                                                                                           
                        <th><%:MAC Address%></th>
                        <th><%:Average Value%></th>
                        <th><%:Peak Value%></th>                                                                                                       
                </tr>                                                                                                                                  
        </thead>                                                                                                                                       
</table>
<div style="width:100%; height:200px; overflow-y:auto; overflow-x:hidden;">
<table id="polylines" style="width:100%; table-layout:fixed; border-collapse:collapse;" cellspacing="5">
		<tr style="text-align:center; vertical-align:top">
			<td class="cbi-value-field" colspan="6">
				<em><%:Collecting data...%></em>
			</td>
		</tr>
</table>
</div>
<%+footer%>

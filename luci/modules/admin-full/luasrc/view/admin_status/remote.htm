<%#
LuCI - Lua Configuration Interface
Copyright 2010 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id: bandwidth.htm 9014 2012-08-14 13:08:18Z jow $

-%>

<%-
	local dev
	local remote_devices = { }
	local cmd_show_ap = "ls /var/lib/luci-bwc/capwap"
	local sort_method = (luci.http.formvalue("order") and luci.http.formvalue("order")) or "ascend";

	for w in string.gfind(luci.sys.exec(cmd_show_ap), "[%d%a]+") do
		table.insert(remote_devices, w)
	end

	dev = luci.dispatcher.context.requestpath
	dev = dev[#dev] ~= "remote" and dev[#dev] or remote_devices[1]
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<link type="text/css" rel="stylesheet" href="<%=resource%>/remote_dev.css" />
<script type="text/javascript">//<![CDATA[
	var rtxhr = new XHR();
	var aObj = { };
	var flag;

	var G;
	var TIME = 0;
	var RXB  = 1;
	var RXP  = 2;
	var TXB  = 3;
	var TXP  = 4;

	var CUR  = 0;
	var AVG  = 1;
	var PEAK = 2;

	var width  = 760;
	var height = 300;
	var step   = 5;
	var dev_max    = 64;
	var column_max = 3;

	var data_wanted = Math.floor(width / step);
	var data_fill   = 0;
	var data_table;

	var label_25;
	var label_50;
	var label_75;

	var label_scale;
	var label_scalev;

	var label_sign = ['cur', 'avg', 'peak'];
	var label_sign_lua = ['<%:Current%>' , '<%:Average%>', '<%:Peak%>'];
	var colo = ['blue', 'yellow', 'red', 'green',
		'fuchsia', 'maroon', 'lime', 'purple'];

	function initObj(mac, obj)
	{

		obj["data"] = [ ];
		
		for (var i = 0; i < data_wanted; i++)
			obj["data"][i] = 0;
		
		obj["obj_polyline"] = G.getElementById('pl_' + mac);;
		obj["obj_label"] = [null, null, null];
		obj["data_stamp"] = -1;
		obj["data_avg"] = -1;
		//obj["data_max"] = -1;
		obj["data_peak"] = -1;
		obj["data_scale"] = -1;
	}
	
	function reverseTable()
	{
		if(flag)
			flag = -1;
		else
			flag = 0;

		var rowObj = [];
		var rows = document.getElementsByTagName('tbody')[0].rows;
		for(var i = 0, len = rows.length; i<len; i++)
		{
			rowObj[i] = rows[i];
		}
		
		rowObj.reverse();
		 
		for(var i = 0; i<rowObj.length; i++)
			document.getElementsByTagName('tbody')[0].appendChild(rowObj[i]);
	}
	
	function MouseOver()
	{
		var obj = G.getElementById('pl_' + this.id);
		obj.setAttribute('class', 'blod_line');
	}
	
	function MouseOut()
	{
		var obj = G.getElementById('pl_' + this.id);
		obj.setAttribute('class', 'slim_line');
	}
	
	function bandwidth_label(bytes, br)
	{
		var uby = '<%:kB/s%>';
		var kby = (bytes / 1024);

		if (kby >= 1024)
		{
			uby = '<%:MB/s%>';
			kby = kby / 1024;
		}

		var ubi = '<%:kbit/s%>';
		var kbi = (bytes * 8 / 1024);

		if (kbi >= 1024)
		{
			ubi = '<%:Mbit/s%>';
			kbi = kbi / 1024;
		}

		return String.format("%f %s%s(%f %s)",
			kbi.toFixed(2), ubi,
			br ? '-' : ' ',
			kby.toFixed(2), uby
		);
	}

	/* wait for SVG */
	window.setTimeout(
		function() {
			var svg = document.getElementById('rtsvg');
	
			try {
				G = svg.getSVGDocument
					? svg.getSVGDocument() : svg.contentDocument;
			}
			catch(e) {
				G = document.embeds['rtsvg'].getSVGDocument();
			}

			if (!G)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = svg.offsetWidth  - 2;
				height      = svg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step);

				/* find table object */
				data_table = document.getElementById('table_lines');
				
				/* get basic line obj */
				label_25 = G.getElementById('label_25');
				label_50 = G.getElementById('label_50');
				label_75 = G.getElementById('label_75');
				
				label_scale   = document.getElementById('scale');
				label_scalev   = document.getElementById('scalev');

				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{
					var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
						line.setAttribute('x1', i);
						line.setAttribute('y1', 0);
						line.setAttribute('x2', i);
						line.setAttribute('y2', '100%');
						line.setAttribute('style', 'stroke:black;stroke-width:0.1');

					var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
						text.setAttribute('x', i + 5);
						text.setAttribute('y', 15);
						text.setAttribute('style', 'fill:#999999; font-size:9pt');
						text.appendChild(G.createTextNode(Math.round((width - i) / step / 60) + 'm'));

					label_25.parentNode.appendChild(line);
					label_25.parentNode.appendChild(text);
				}

				label_scale.innerHTML = String.format('<%:(%d minute window, %d second interval)%>', data_wanted / 60, 3);
				label_scalev.innerHTML = '<%=luci.http.formvalue("order")%>';
				
				/* render datasets, start update interval */
				XHR.poll(3, '<%=build_url("admin/status/realtime/remote_status", null)%>', null,
					function(x, json)
					{
						var data_max   = 0;
						
						console.log("num:%d", json.length);
						
						if(json.length > 0)
						{
							while (data_table.rows.length > 0)
								data_table.rows[0].parentNode.removeChild(data_table.rows[0]);
						}

						for(var i = 0; i < json.length; i++)
						{
							var data = json[i];
							var MAC = json[i][0];
							
							/* init new AP */
							if(!aObj[MAC])
							{
								aObj[MAC] = { };
								initObj(MAC, aObj[MAC]);
							}

							var AP = aObj[MAC];
							/* add polyline for AP */
							if(!AP["obj_polyline"])
							{
								console.log("create line for %s", MAC);
								
								AP["obj_polyline"] = G.createElementNS('http://www.w3.org/2000/svg', 'polyline');
								AP["obj_polyline"].setAttribute('id', 'pl_' + MAC);
								AP["obj_polyline"].setAttribute('points', '');
								AP["obj_polyline"].setAttribute('style', 'fill:' + colo[i % 3] + ';stroke:'+ colo[i % 3] + ';');
								AP["obj_polyline"].setAttribute('class', 'slim_line');
								
								label_25.parentNode.appendChild(AP["obj_polyline"]);
							}

							console.log("polling in:%s", MAC);
							
							/* insert a row for AP */
							var tr = data_table.insertRow(flag);
							tr.className = 'row_style_' + (i % 2);
							
							for(var j = 0; j < label_sign.length; j++)
							{					
								var td = tr.insertCell(-1);

								if(j > 0)
								{
									td.setAttribute('id', String.format('bw_%s_%s', MAC, label_sign[j]));
								}
								else
								{
									/*first column is the MAC list*/
									td.setAttribute('id', String.format('%s', MAC));
									td.innerHTML = '<strong style="border-bottom:2px solid ' + colo[i % 3] + '">' + MAC + '</strong>';
									td.onmouseover = MouseOver;
									td.onmouseout = MouseOut;
									//td.onmouseover = function(){change_class_name(line_obj[i], 'blod_line');}
									//td.onmouseout = function(){change_class_name(line_obj[i], 'slim_line');}
								}
							}

							console.log('starting poll %s', MAC);
							/* [0:cur] [1:avg] [2:peak] */
							//AP["obj_label"][CUR] = document.getElementById(String.format('bw_%s_cur', MAC));
							AP["obj_label"][AVG] = document.getElementById(String.format('bw_%s_avg', MAC));
							AP["obj_label"][PEAK] = document.getElementById(String.format('bw_%s_peak', MAC));

							/* assemble txrx data to array */
							for (var j = 1; j < data.length; j++)
							{
								/* skip overlapping entries */
								if (data[j][TIME] <= AP["data_stamp"])
									continue;

								/* normalize difference against time interval */
								if (j > 1)
								{
									var time_delta = data[j][TIME] - data[j-1][TIME];
									var data_delta = (data[j][RXB] - data[j-1][RXB]) + (data[j][TXB] - data[j-1][TXB]);
									if (time_delta && data_delta)
									{
										AP["data"].push(data_delta / (2 * time_delta));
									}
								}
							}

							/* cut off outdated entries */
							AP["data"] = AP["data"].slice(AP["data"].length - data_wanted, AP["data"].length);

							/* find peak */
							for (var j = 0; j < AP["data"].length; j++)
							{
								data_max = Math.max(data_max, AP["data"][j]);
								AP["data_peak"] = Math.max(AP["data_peak"], AP["data"][j]);

								if (j > 1)
								{
									AP["data_avg"] = (AP["data_avg"] + AP["data"][j]) / 2;
								}
								else
								{
									AP["data_avg"] = AP["data"][j];
								}
							}

							/* remember current timestamp, calculate horizontal scale */
							AP["data_stamp"] = data[data.length - 1][TIME];
							data_scale = height / (data_max * 1.1);

							/* plot data */
							var pt_mg = '0,' + height;
							var y_mg = 0;

							for (var j = 0; j < AP["data"].length; j++)
							{
								var x = j * step;

								y_mg = height - Math.floor(AP["data"][j] * data_scale);

								pt_mg += ' ' + x + ',' + y_mg;
							}

							pt_mg += ' ' + width + ',' + y_mg + ' ' + width + ',' + height;

							AP["obj_polyline"].setAttribute('points', pt_mg);

							//AP["obj_label"][CUR].innerHTML = bandwidth_label(data[data.length - 1], true);
							AP["obj_label"][AVG].innerHTML = bandwidth_label(AP["data_avg"], true);
							AP["obj_label"][PEAK].innerHTML = bandwidth_label(AP["data_peak"], true);
						}//for
						
							label_25.firstChild.data = bandwidth_label(1.1 * 0.25 * data_max);
							label_50.firstChild.data = bandwidth_label(1.1 * 0.50 * data_max);
							label_75.firstChild.data = bandwidth_label(1.1 * 0.75 * data_max);
						
					}//function
				);//XHR.poll
			}
		}, 1000
	);
//]]></script>

<h2><a id="content" name="content"><%:Realtime Traffic%></a></h2>

<embed id="rtsvg" style="width:100%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/remote.svg" />
<div style="text-align:right"><small id="scale">-</small></div>
<div style="text-align:right"><small id="scalew"><%=(luci.sys.exec(cmd_show_ap))%>-<%=pcdata(dev)%></small></div>
<div style="text-align:right"><small id="scalev">-</small></div>
<br />
<!--
<select style="width:auto;" id="sort_mac">
			<option value="0">Ascend</option>
			<option value="-1">Descend</option>
</select>-->
<table style="width:100%">                                                                                                                            
	<thead>                                                                                                                                        
		<tr style="text-align:center;">
			<th onclick="reverseTable()"><%:MAC Address%></th>
			<th><%:Average Value%></th>
			<th><%:Peak Value%></th>
		</tr>
	</thead>
</table>
<div style="width:100%; height:200px; overflow-y:auto; overflow-x:hidden;">
<table id="table_lines" style="width:100%; table-layout:fixed; border-collapse:collapse;" cellspacing="5">
	<tbody>
		<tr style="text-align:center; vertical-align:top">
			<td class="cbi-value-field" colspan="6">
				<em><%:Collecting data...%></em>
			</td>
		</tr>
	</tbody>
</table>
</div>
<%+footer%>
